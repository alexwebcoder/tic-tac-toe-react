warning: in the working copy of 'src/index.js', LF will be replaced by CRLF the next time Git touches it
[1mdiff --git a/src/Board.js b/src/Board.js[m
[1mindex 4c63e89..41d6645 100644[m
[1m--- a/src/Board.js[m
[1m+++ b/src/Board.js[m
[36m@@ -1,14 +1,20 @@[m
 import Square from "./Square";[m
[31m-import { useState } from "react";[m
[32m+[m[32mimport { useState } from "react"; //state is to remember things[m
 [m
[31m-const Board = () => {[m
[31m-  //Each time a player moves, xIsNext (a boolean) will be flipped to determine which player goes next and the game’s state will be saved[m
[32m+[m[32m//the onPlay function is passed in as a prop that Board can call with the updated squares array whenever a player makes a move. Adding the onPlay function as a prop is what makes the Board component fully controlled by the game component based on it receiving ths onPlay prop.[m
[32m+[m[32mconst Board = ({ xIsNext, squares, onPlay}) => {[m
[32m+[m[41m [m
   const [xIsNext, setXisNext] = useState(true); [m
   // The Board needs to know the state of the 9 Square components. Therefore, the game's state is stored in the parent Board component. The parent then can pass state back down to the children via props. (Lifting State Up)[m
   //useState is the hook that returns two values. Squares is the variable that holds the current State and setSquares is the function that updates the state.[m
 [m
   //Array(9).fill(null) (Array constructor) creates an array with nine elements and sets each of them to null. (fill method changes all methods in the array to static value (in this case null)) The useState() call around it declares a squares state variable that’s initially set to that array. Each entry in the array corresponds to the value of a square. The board component will then pass the value prop down to each of the square components that it renders.[m
[31m-  const [squares, setSquares] = useState(Array(9).fill(null));[m
[32m+[m[41m  [m
[32m+[m
[32m+[m[32m  //  this is getting moved to Game.js. Moving this state to the Game component will make the board fully controlled by the props that it receives.[m
[32m+[m[41m  [m
[32m+[m[32m  // const [squares, setSquares] = useState(Array(9).fill(null));[m
[32m+[m[41m  [m
   //the squares variable will be assigned to the value property of each square component and the value property will be passed to the square component as a prop. So each square will receive a value prop of 'X' , 'O' or null. The other prop will be onSquareClick.[m
 [m
   // To let the players know when the game is over, you can display text such as “Winner: X” or “Winner: O”. To do that you’ll add a status section to the Board component. The status will display the winner, if the game is over and if the game is ongoing you’ll display which player’s turn is next:[m
[36m@@ -19,6 +25,7 @@[m [mconst Board = () => {[m
   if (winner) {[m
     status = "Winner: " + winner;[m
   } else {[m
[32m+[m[32m     //Each time a player moves, xIsNext (a boolean) will be flipped to determine which player goes next and the game’s state will be saved[m
     status = "Next player: " + (xIsNext ? "X" :  "O");[m
   }[m
    [m
[36m@@ -32,6 +39,10 @@[m [mconst Board = () => {[m
       return;[m
     }[m
     //The handleClick function creates a copy of the squares array (nextSquares) with the JavaScript slice() Array method. Then, handleClick updates the nextSquares array to add X or O to the ([i] index) square.[m
[32m+[m[32m    //If you mutated the squares array, implementing time travel would be very difficult.[m
[32m+[m
[32m+[m[32m    // However, you used slice() to create a new copy of the squares array after every move, and treated it as immutable. This will allow you to store every past version of the squares array, and navigate between the turns that have already happened.[m
[32m+[m
     const nextSquares = squares.slice();[m
     if (xIsNext) {[m
 [m
[36m@@ -41,9 +52,13 @@[m [mconst Board = () => {[m
     } else {[m
       nextSquares[i] = "O";[m
     }[m
[32m+[m[32m    //the onPlay function calls nextSquares so the game component can update when the user clicks the next square[m
[32m+[m[32m    onPlay(nextSquares);[m
     //Calling the setSquares function lets React know the state of the component has changed. This will trigger a re-render of the components that use the squares state (Board) as well as its child components (the Square components that make up the board).[m
[31m-    setSquares(nextSquares);[m
[31m-    setXisNext(!xIsNext);[m
[32m+[m[41m    [m
[32m+[m[32m    //the setSquares and setXIsNext calls below are being replaced by a single call tho the onPlay function so the Game component can update the Board when the user clicks a square.[m
[32m+[m[32m    // setSquares(nextSquares);[m
[32m+[m[32m    // setXisNext(!xIsNext);[m
   }[m
   [m
     return ( [m
[36m@@ -92,10 +107,10 @@[m [mconst calculateWinner = (squares) => {[m
   ];[m
   //we are looping over the lines variable [m
   for (let i = 0; i < lines.length; i++) {[m
[31m-    //we are using a destructuring assignment to unpack the values from the array and stoere them into the variables a, b and c[m
[32m+[m[32m    //we are using a destructuring assignment to unpack the values from the array and store them into distinct variable of a, b and c[m
     const [a, b, c] = lines[i];[m
     if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {[m
[31m-      console.log('squares A:',[a], 'squares b:', squares[b], 'squares c', squares[c]);[m
[32m+[m[32m      console.log ('squares A:',[a], 'squares b:', squares[b], 'squares c', squares[c]);[m
       return squares[a];[m
     }[m
   }[m
[1mdiff --git a/src/index.js b/src/index.js[m
[1mindex d563c0f..78102d9 100644[m
[1m--- a/src/index.js[m
[1m+++ b/src/index.js[m
[36m@@ -1,5 +1,6 @@[m
[32m+[m[32m//bridge between our App component in App.js and the the web browser (index.html)[m
 import React from 'react';[m
[31m-import ReactDOM from 'react-dom/client';[m
[32m+[m[32mimport ReactDOM from 'react-dom/client';// reacts library to talk to web browser[m
 import './index.css';[m
 import App from './App';[m
 import reportWebVitals from './reportWebVitals';[m
